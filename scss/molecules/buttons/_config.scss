////
/// @author Raphael HÃ¼ni
///
/// @group Molecules - Buttons
////


/// This sets the base markup of all our buttons. We only reset some properties and define the display and general appearance but no coloring, sizing, text formatting or similar happens here. The only property that can be adjusted through params is the transition.
///
/// All valid strings for the transition property can be given to the mixin through the relevant parameter (see below).
///
/// @param {String} $transition [$button-base-transition] - Defines the transition effect on the button
///
/// @example scss Basic Usage
///   .btn {
///     @include button-base($transition: .2s background-color ease-in);
///   }
///
/// @since 0.1.0
@mixin button-base(
  $transition: $button-base-transition
) {
  // make sure the button is inline-block so the whole area (including the padded one) can be clicked
  display: inline-block;

  // remove standard button and input borders (reset)
  border-style: solid;
  border-width: 0;

  vertical-align: $button-base-vertical-align;

  // we indicate that the whole button can be clicked by changing the cursor to a pointer
  cursor: pointer;

  // reset webkit and moz base styles
  -webkit-appearance: none;
  -moz-appearance: none;

  // create a smooth transition of the background-color on hover, focus and active states
  // the decision to set the transition through one variable makes it easily adjustable. This way it is i. e. no problem to define different transitions for several properties
  transition: $transition;
}

/// Here we define the coloring of our buttons. Everything from background, to hover states, to text, to border coloring is defined through this mixin.
///
/// The mixin is created very flexible so you can style it however the design demands. See the annotations to the params below for further information.
///
/// @param {Color} $bg [$button-base-background-color] - Sets the background color for the button. Can also be set to `false` to create transparent buttons
/// @param {Color} $bg-hover [null] - If you have a previously defined hover color for your buttons set this parameter to it. Otherwise let it be `null` which kicks in the automatic hover effect for the background color (see below).
/// @param {Number} $bg-hover-treatment [$button-base-background-hover-treatment] - Accepts values from `-100%` to `100%` which defines the darkening (for values below 0) or lightening of the background color upon hover.
/// @param {Color} $color [$button-base-color] - Defines the text color of the button
/// @param {Color} $color-hover [$button-base-color-hover] - Defines the hover text color of the button. Be very careful to set this variable if you have applied hover styles concerning color to the anchor elements if you do not want them to be inherited here.
/// @param {Boolean} $radius [false] - If some border radius should be applied to the button set this value to true.
/// @param {Number} $border-radius [null] - Define the value of the border radius here.
/// @param {Color} $border-color [null] - Use this parameter to indicate the border's color.
///
/// @todo Do we need another parameter to define a border hover color?
///
/// @example scss Basic Usage
///   .btn {
///     // @include button-base($transition: .2s background-color ease-in);
///     @include button-colors(
///       $bg: #f1f1f1,
///       $bg-hover: #fff,
///       $color: indigo
///     );
///   }
///
/// @since 0.1.0
@mixin button-colors(
  $bg: $button-base-background-color,
  $bg-hover: null,
  $bg-hover-treatment: $button-base-background-hover-treatment,
  $color: $button-base-color,
  $color-hover: $button-base-color-hover,
  $radius: false,
  $border-radius: null,
  $border-color: null
) {
  @if $bg {
    @if $bg-hover == null {
      $bg-hover: scale-color($bg, $lightness: $bg-hover-treatment);
    }

    @if $border-color == null {
      $border-color: scale-color($bg, $lightness: $bg-hover-treatment);
    }

    border-color: $border-color;

    background-color: $bg;
    color: $color;

    &:active,
    &:focus,
    &:hover {
      background-color: $bg-hover;

      // make sure no a hover styles are inherited
      color: $color-hover;
    }
  }

  @if $radius and $border-radius == null {
    $border-radius: $button-base-radius;

    border-radius: $border-radius;
  }
}

/// Define the sizing for the buttons which includes the padding that should be applied, the bottom margin and also the option to set a margin as full width for either mobile or desktop or any screen sizes.
///
/// @param {Number} $margin-bottom [$button-base-margin-bottom] - How much space is needed below each button.
/// @param {Number} $padding-vertical [$button-base-padding-vertical] - Defines the vertical padding that is applied to the button.
/// @param {Number} $padding-horizontal [$button-base-padding-horizontal] - Defines the horizontal padding that is applied to the button.
/// @param {mobile | desktop | all | false} $full-width [false] - Defines if buttons should be full width or not. This basically just adds a `width: 100%` definition to the styles. Setting the parameter to i. e. `desktop` applies the definition within a media query to ensure the button gets stretched to 100% of its containers width for larger screens. Default sizing is equal to the text length plus the horizontal padding.
///
/// @example scss Basic Usage
///   .btn {
///     // @include button-base($transition: .2s background-color ease-in);
///     @include button-size(
///       $margin-bottom: 1.5rem,
///       $padding-vertical: .25rem,
///       $padding-horizontal: .5rem,
///       $full-width: 'mobile'
///     );
///   }
///
/// @since 0.1.0
@mixin button-size(
  $margin-bottom: $button-base-margin-bottom,
  $padding-vertical: $button-base-padding-vertical,
  $padding-horizontal: $button-base-padding-horizontal,
  $full-width: false // or 'mobile', 'desktop', 'all' (usually solved through a concrete config variable)
) {
  margin-bottom: $margin-bottom;

  @if $full-width == 'mobile' {
    @include susy-media(max-mobile) {
      width: 100%;
      padding: $padding-vertical 0;
    }
  } @elseif $full-width == 'desktop' {
    @include susy-media(go-desktop) {
      width: 100%;
      padding: $padding-vertical 0;
    }
  } @elseif $full-width == 'all' {
    width: 100%;
    padding: $padding-vertical 0;
  } @elseif not $full-width {
    // apply spacing around the text, the buttons size completely depends on this value for now, this also centers the text within the button
    padding: $padding-vertical $padding-horizontal;
  }
}

/// Defines all text styles that might apply to the button such as font family, font weight, aligns, decorations and of course also all of their hover states.
///
/// @param {List | String} $font-family [$button-base-font-family] - Which font family should be used for the buttons is defined here.
/// @param {Number} $font-size [$button-base-font-size] - Defines the font size for the button text.
/// @param {String | Number} $font-weight [$button-base-font-weight - Defines the font weight of the button text.]
/// @param {String | Number} $font-weight-hover [$button-base-font-weight-hover] - Button text font weight on hover.
/// @param {String} $text-align [$button-base-text-align] - Button text align
/// @param {String} $text-decoration [$button-base-text-decoration] - Button text decoration (especially useful if some different text decoration is set for the anchor tags).
/// @param {String} $text-decoration-hover [$button-base-text-decoration-hover] - Text decoration for buttons upon hover, also most useful if some hover state text decoration is defined for the anchor tags.
///
/// @example scss Basic Usage
///   .btn {
///     // @include button-base($transition: .2s background-color ease-in);
///     @include button-text(
///       $font-size: 1.2rem,
///       $text-align: center,
///       $text-decoration-hover: none
///     );
///   }
///
/// @since 0.1.0
@mixin button-text(
  $font-family: $button-base-font-family,
  $font-size: $button-base-font-size,
  $font-weight: $button-base-font-weight,
  $font-weight-hover: $button-base-font-weight-hover,
  $text-align: $button-base-text-align,
  $text-decoration: $button-base-text-decoration,
  $text-decoration-hover: $button-base-text-decoration-hover
) {
  // need to set this for button and input elements on Safari
  font-family: $font-family;
  font-size: $font-size;
  font-weight: $font-weight;
  // make sure no special line heights are inherited
  line-height: normal;
  text-align: $text-align;
  text-decoration: $text-decoration;

  &:hover,
  &:focus,
  &:active {
    font-weight: $font-weight-hover;
    // make sure we have the configured text-decoration
    text-decoration: $text-decoration-hover;
  }
}

/// Prepares a button to use grunticon generated icons which are applied as background images. Therefore this mostly just adds some space on either the left or the right where the icon can be placed.
///
/// @param {'left' | 'right'} $icon-position ['right'] - Defines on which side of the button the icon should appear.
/// @param {Number} $icon-size [$button-base-icon-size] - Defines the size of the icon, is assigned to the `background-size` property.
/// @param {Number} $icon-spacing [$button-base-icon-spacing] - Defines the space needed between the icon and the ensuing text.
/// @param {Number} $icon-padding [$button-base-padding-horizontal] - Defines how far the icon should be set from the border. Usually this should be equal to the default button padding, however some cases might occur, where a different value is better fitting.
///
/// @output Just sets the appropriate padding, background position and size, according to the values given to the mixin.
///
/// @example scss Basic Usage
///   .btn {
///     // @include button-base($transition: .2s background-color ease-in);
///     @include button-icon(
///       $icon-position: 'left',
///       $icon-size: 1rem,
///       $icon-spacing: .375rem,
///       $icon-padding: .5rem
///     );
///   }
///
/// @since 0.1.0
@mixin button-icon(
  $icon-position: 'right', // or left (usually solved through button config variable though!)
  $icon-size: $button-base-icon-size,
  $icon-spacing: $button-base-icon-spacing,
  $icon-padding: $button-base-padding-horizontal
) {
  @if $icon-position == 'left' {
    padding-left: $icon-size + $icon-spacing + $icon-padding;

    background-position: left $icon-padding center;
    background-size: $icon-size;
  }@elseif $icon-position == 'right' {
    padding-right: $icon-size + $icon-spacing + $icon-padding;

    background-position: right $icon-padding center;
    background-size: $icon-size;
  }
}


$button-base-background-color: $color-background-secondary !default;
$button-base-background-hover-treatment: -10% !default;
$button-base-color: $color-text !default;
$button-base-color-hover: $button-base-color !default;
$button-base-font-family: $sans !default;
$button-base-font-size: rem-calc(18) !default;
$button-base-font-weight: normal !default;
$button-base-font-weight-hover: $button-base-font-weight !default;
$button-base-icon-size: 1.25rem !default;
$button-base-icon-spacing: rem-calc(12) !default;
$button-base-margin-bottom: rem-calc(20) !default;
$button-base-padding-horizontal: rem-calc(12) !default;
$button-base-padding-vertical: rem-calc(6) !default;
$button-base-radius: $border-radius !default;
$button-base-text-align: center !default;
$button-base-text-decoration: none !default;
$button-base-text-decoration-hover: none !default;
$button-base-transition: background-color .5s ease !default;
$button-base-vertical-align: middle !default;

// primary button
$button-primary-background-color: $color-primary !default;
$button-primary-hover-treatment: +10% !default;

// back button
$button-back-icon-position: 'left';

// forward button
$button-forward-icon-position: 'right';

// wide button
$button-wide-display: 'all';
